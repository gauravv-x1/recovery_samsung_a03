#!/sbin/sh
#
# Zip from Ian Macdonald
# Modifed by TakuruKagami
#
# Use this to prime your device after installing TWRP.

DEBUG=true

ZIPFILE=$3
ZIPNAME=${ZIPFILE##*/}
OUTFD=$2

scr_wdth=50

# Detect real $OUTFD
#
if readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null; then
  OUTFD=0
  for FD in $( ls /proc/$$/fd ); do
    if readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null; then
      if ps | grep " 3 $FD " | grep -v grep >/dev/null; then
	OUTFD=$FD
	break
      fi
    fi
  done
fi

ui_print() {
  echo -ne "ui_print $1\n" >> /proc/self/fd/$OUTFD
  echo -ne "ui_print\n" >> /proc/self/fd/$OUTFD
}

debug_print() {
  [ "$DEBUG" = true ] && ui_print "$*"
}

print_full_bar() {
  ui_print "$(printf '%*s\n' $scr_wdth | tr ' ' '=')"
}

print_justified() {
  local str="$1"
  local str_len=${#str}
  local padding_len=$(( ($scr_wdth - $str_len - 2) / 2))
  local ljust="$(printf '%*s' $padding_len)"
  local rjust="$(printf '%*s' $(($padding_len + $str_len % 2)))"

  ui_print "=$ljust$str$rjust="
}

md5() {
  md5sum -b "$1"
}

file_changed() {
  local file="$1"
  local old_md5="$2"
  local new_md5=$( md5 "$file" )

  if [ $new_md5 != $old_md5 ]; then
    debug_print " -     ...modified."
  else
    debug_print " -     ...unchanged."
  fi
}

rm_from_manifest() {
  local service=$1
  local md5
  local i

  # Package path is different on Android 10. Check and adapt.
  #
  [ $major -gt 9 ] && local path_extra='\.hardware'

  for i in /vendor/etc/vintf/manifest.xml \
	   $ANDROID_ROOT/system/etc/vintf/compatibility_matrix.device.xml \
	   /vendor/etc/vintf/manifest/vaultkeeper_manifest.xml; do
    if [ -f $i ]; then
      ui_print " -   Found $i."
      md5=$( md5 $i )
      sed -i -e '/<hal format="hidl">/{N;/<name>vendor\.samsung'"$path_extra"'\.security\.'"$service"'<\/name>/{:loop;N;/<\/hal>/!bloop;d}}' $i
      file_changed $i $md5
    fi
  done
}

decrypte_userdata() {
local i

ui_print "Disable encryption in this device for /data or /userdata partition"

for i in /vendor/etc/fstab.mt* \
/vendor/etc/fstab.ums* ; do
if [ -f $i ]; then
ui_print "Found $i."
file2=$i
file1="$(echo ""$i".bck")"
file3="$(echo ""$i".orig")"
if [ -e $file1 ]
then
echo "You had do that before"
else
cp "$file2" "$file3"
mv "$file2" "$file1"
if grep -R "v2+inlinecrypt_optimized" $file1
then
cat "$file1" | awk '{gsub("fileencryption=aes-256-xts:aes-256-cts:v2+inlinecrypt_optimized"," ");print}' > "$file2"
rm -rf $file1
else
cat "$file1" | awk '{gsub("fileencryption=aes-256-xts:aes-256-cts:v2"," ");print}' > "$file2"
rm -rf $file1
fi
mv "$file2" "$file1"
cat "$file1" | awk '{gsub("keydirectory=/metadata/vold/metadata_encryption"," ");print}' > "$file2"
rm -rf "$file1"
make_f2fs -qf /dev/block/by-name/userdata
fi
fi
done
}

ui_print "Mount $ANDROID_ROOT..."
mount $ANDROID_ROOT 2>/dev/null
mount -o remount,rw $ANDROID_ROOT 2>/dev/null

if ! mount | grep $ANDROID_ROOT >/dev/null; then
  ANDROID_ROOT=/system_root
  ui_print "Can't mount $ANDROID_ROOT..."
  mount -o rw $ANDROID_ROOT
  if ! mount | grep $ANDROID_ROOT >/dev/null; then
    ui_print "Cannot mounting $ANDROID_ROOT"
    exit 2
  fi
fi

ui_print "Mount vendor this needed for remove encryption work"
mount /vendor
mount -o remount,rw /vendor

if ! mount | grep /vendor >/dev/null; then
  ui_print "Cant mount vendor abort all process to remove encryption"
  exit 3
fi

decrypte_userdata

ui_print "Unmount /vendor"
umount /vendor
ui_print "Unmount $ANDROID_ROOT..."
umount $ANDROID_ROOT
ui_print "All process finished."
exit
